---
- name: ensure group for admin_user exists
  group:
    name: "{{ admin_user_group }}"
    state: present
  become: yes
  tags: create-user

- name: create admin_user
  user:
    name: "{{ admin_user }}"
    group: "{{ admin_user_group }}"
    state: present
    createhome: yes
    shell: /bin/bash
  become: yes
  when: os_family not in ("Alpine", "Solus")
  tags: create-user

- name: create admin_user (user password required)
  user:
    name: "{{ admin_user }}"
    group: "{{ admin_user_group }}"
    password: '{{ query("community.general.random_string")[0] | password_hash("sha256") }}'
    update_password: on_create
    state: present
    createhome: yes
    shell: /bin/bash
  become: yes
  when: os_family in ("Alpine", "Solus")
  tags: create-user

- name: allow user to have passwordless sudo
  lineinfile:
    dest: /etc/sudoers
    line: '{{ admin_user }} ALL=(ALL) NOPASSWD: ALL'
    validate: 'visudo -cf %s'
  become: yes
  tags: create-user

- name: check if Ansible temporary user directory exists
  file:
    path: "{{ admin_home_directory }}.ansible/tmp"
    state: directory
    mode: 0700
    owner: "{{ admin_user }}"
    group: "{{ admin_user_group }}"
  become: yes
  tags: create-user

- name: check for local public key file
  stat:
    path: "{{ local_path_to_public_key }}"
  delegate_to: localhost
  register: public_key_file
  tags: create-user

- name: set up authorized keys for the user
  authorized_key:
    user: "{{ admin_user }}"
    key: "{{ lookup('file', local_path_to_public_key) }}"
  become: yes
  become_user: "{{ admin_user }}"
  tags: create-user

- name: set created admin_user as ansible_user
  set_fact:
    ansible_user: "{{ admin_user }}"
  tags: create-user
